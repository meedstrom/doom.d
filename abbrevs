;;-*-coding: utf-8;-*-
(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("123n" "1, 2, 3, ..., n" nil :count 0)
    ("123nm" "1 \\cdot 2 \\cdot 3 \\cdot ... \\cdot n" nil :count 0)
    ("123np" "1 + 2 + 3 + ... + n" nil :count 0)
    ("123npm" "1 \\pm 2 \\pm 3 \\pm ... \\pm n" nil :count 0)
    ("1s" "one-sided" nil :count 0)
    ("2s" "two-sided" nil :count 0)
    ("Phi0" "\\Phi_0" nil :count 0)
    ("Phi1" "\\Phi_1" nil :count 13)
    ("Phi2" "\\Phi_2" nil :count 4)
    ("Phi3" "\\Phi_3" nil :count 2)
    ("Phi4" "\\Phi_4" nil :count 0)
    ("Phi5" "\\Phi_5" nil :count 0)
    ("Phi6" "\\Phi_6" nil :count 0)
    ("Phi7" "\\Phi_7" nil :count 0)
    ("Phi8" "\\Phi_8" nil :count 0)
    ("Phi9" "\\Phi_9" nil :count 0)
    ("abst" "abstract" nil :count 1)
    ("abt" "about" nil :count 1)
    ("acor" "autocorrelation" nil :count 4)
    ("acov" "autocovariance" nil :count 2)
    ("adj" "adjusted" nil :count 2)
    ("adjc" "adjacent" nil :count 1)
    ("aixi" "a_i X_i" nil :count 3)
    ("algo" "algorithm" nil :count 1)
    ("alp" "\\alpha" nil :count 0)
    ("alpha" "\\alpha" nil :count 2)
    ("als" "analysis" nil :count 0)
    ("alys" "analysis" nil :count 4)
    ("alz" "analyze" nil :count 1)
    ("app" "approach" nil :count 2)
    ("appx" "approximate" nil :count 0)
    ("ass" "assume" nil :count 2)
    ("assn" "assumption" nil :count 5)
    ("avg" "transform" nil :count 0)
    ("bc" "because" nil :count 0)
    ("beta" "\\beta" nil :count 31)
    ("betw" "between" nil :count 1)
    ("bjxj" "b_j X_j" nil :count 1)
    ("bn" "Bayesian" nil :count 2)
    ("brow" "Brownian" nil :count 3)
    ("btw" "by the way" nil :count 0)
    ("bxcx" "Box-Cox" nil :count 1)
    ("bxj" "Box-Jenkins" nil :count 1)
    ("cand" "candidate" nil :count 1)
    ("ccor" "cross-correlation" nil :count 1)
    ("ccov" "cross-covariance" nil :count 1)
    ("cf" "counterfactual" nil :count 0)
    ("chi" "\\chi" nil :count 1)
    ("chisq" "χ^2" nil :count 1)
    ("chk" "check" nil :count 1)
    ("cnt" "count" nil :count 1)
    ("coef" "coefficient" nil :count 2)
    ("coefs" "coefficients" nil :count 0)
    ("com" "common" nil :count 0)
    ("comb" "combination" nil :count 1)
    ("compl" "complement" nil :count 0)
    ("concl" "conclusion" nil :count 0)
    ("cons" "consistent" nil :count 3)
    ("const" "constant" nil :count 2)
    ("cont" "continuous" nil :count 0)
    ("contrib" "contribution" nil :count 0)
    ("cor" "correlation" nil :count 10)
    ("cord" "correlated" nil :count 0)
    ("cov" "covariance" nil :count 18)
    ("covt" "covariate" nil :count 0)
    ("coz" "cause" nil :count 0)
    ("ctg" "category" nil :count 0)
    ("cum" "cumulative" nil :count 0)
    ("def" "define" nil :count 0)
    ("defd" "defined" nil :count 0)
    ("defn" "definition" nil :count 0)
    ("delt" "\\delta" nil :count 1)
    ("delta" "\\delta" nil :count 4)
    ("dens" "density" nil :count 0)
    ("dep" "dependent" nil :count 2)
    ("dev" "deviation" nil :count 0)
    ("df" "degrees of freedom" nil :count 2)
    ("dim" "dimension" nil :count 3)
    ("dist" "distribution" nil :count 7)
    ("distd" "distributed" nil :count 1)
    ("ef" "effect" nil :count 0)
    ("eff" "efficient" nil :count 0)
    ("emp" "empirical" nil :count 0)
    ("eps" "\\epsilon" nil :count 9)
    ("epsilon" "\\epsilon" nil :count 5)
    ("eq" "equal" nil :count 1)
    ("eqn" "equation" nil :count 8)
    ("eqv" "equivalent" nil :count 0)
    ("err" "error" nil :count 3)
    ("est" "estimate" nil :count 11)
    ("estn" "estimation" nil :count 1)
    ("estr" "estimator" nil :count 4)
    ("ev" "event" nil :count 0)
    ("evl" "eventual" nil :count 0)
    ("evs" "events" nil :count 0)
    ("exp" "experiments" nil :count 1)
    ("fm" "formula" nil :count 0)
    ("fn" "function" nil :count 15)
    ("gam" "\\gamma" nil :count 43)
    ("gamma" "\\gamma" nil :count 10)
    ("gen" "general" nil :count 3)
    ("geom" "geometric" nil :count 5)
    ("gs" "Gaussian" nil :count 9)
    ("hyp" "hypothesis" nil :count 0)
    ("id" "identity" nil :count 0)
    ("imp" "important" nil :count 1)
    ("ind" "independent" nil :count 6)
    ("indep" "independent" nil :count 1)
    ("inf" "inference" nil :count 0)
    ("info" "information" nil :count 0)
    ("int" "intensity" nil :count 2)
    ("intv" "interval" nil :count 2)
    ("inv" "invert" nil :count 1)
    ("invy" "invertability" nil :count 1)
    ("lam" "\\lambda" nil :count 2)
    ("lambda" "\\lambda" nil :count 9)
    ("lbr" "｛" nil :count 1)
    ("lin" "linear" nil :count 4)
    ("lincomb" "linear combination" nil :count 4)
    ("log" "logarithm" nil :count 6)
    ("md" "model" nil :count 7)
    ("mlvl" "multilevel" nil :count 0)
    ("mot" "motion" nil :count 1)
    ("ms" "measure" nil :count 0)
    ("mtx" "matrix" nil :count 0)
    ("mu" "\\mu" nil :count 17)
    ("mvt" "multivariate" nil :count 0)
    ("nab" "\\nabla" nil :count 1)
    ("nabla" "\\nabla" nil :count 0)
    ("obs" "observation" nil :count 0)
    ("obv" "obviously" nil :count 0)
    ("omega" "\\omega" nil :count 4)
    ("opz" "optimize" nil :count 0)
    ("par" "parameter" nil :count 2)
    ("pbm" "problem" nil :count 1)
    ("pbmatic" "problematic" nil :count 0)
    ("phi" "\\phi" nil :count 68)
    ("pi" "\\pi" nil :count 3)
    ("po" "Poisson" nil :count 1)
    ("pop" "population" nil :count 0)
    ("poss" "possible" nil :count 2)
    ("pr" "probability" nil :count 0)
    ("prec" "precision" nil :count 0)
    ("pred" "predict" nil :count 0)
    ("predn" "prediction" nil :count 0)
    ("predr" "predictor" nil :count 1)
    ("predv" "predictive" nil :count 0)
    ("prev" "previous" nil :count 0)
    ("proc" "process" nil :count 25)
    ("procs" "processes" nil :count 2)
    ("prs" "probabilities" nil :count 0)
    ("rbr" "｝" nil :count 0)
    ("rea" "realization" nil :count 2)
    ("reg" "regular" nil :count 2)
    ("rel" "relation" nil :count 1)
    ("rep" "represented" nil :count 2)
    ("res" "residual" nil :count 4)
    ("resid" "residual" nil :count 1)
    ("resids" "residuals" nil :count 1)
    ("rgl" "regular" nil :count 0)
    ("rgr" "regression" nil :count 3)
    ("rho" "\\rho" nil :count 50)
    ("rsd" "residual" nil :count 0)
    ("saixi" "\\sum[a_i X_i]" nil :count 5)
    ("sam" "sample" nil :count 1)
    ("sbjxj" "\\sum[b_j X_j]" nil :count 1)
    ("sci" "science" nil :count 4)
    ("sd" "standard deviation" nil :count 1)
    ("se" "standard error" nil :count 0)
    ("sel" "selection" nil :count 1)
    ("seq" "sequence" nil :count 0)
    ("seql" "sequential" nil :count 0)
    ("sig" "significant" nil :count 4)
    ("sigma" "\\sigma" nil :count 14)
    ("sim" "simulate" nil :count 1)
    ("simn" "simulation" nil :count 0)
    ("spc" "space" nil :count 6)
    ("spr" "spread" nil :count 1)
    ("sq" "square" nil :count 1)
    ("srs" "series" nil :count 1)
    ("ssq" "\\sigma^2" nil :count 9)
    ("stat" "statistically" nil :count 0)
    ("stats" "statistics" nil :count 2)
    ("std" "standard" nil :count 0)
    ("stdd" "standardized" nil :count 0)
    ("stn" "stationary" nil :count 26)
    ("sto" "stochastic" nil :count 3)
    ("stoc" "stochastic" nil :count 4)
    ("str" "structure" nil :count 3)
    ("sup" "suppose" nil :count 0)
    ("surv" "survival" nil :count 0)
    ("t0" "t_0" nil :count 0)
    ("t1" "t_1" nil :count 4)
    ("t1n" "{T_1, T_2, ..., T_n}" nil :count 0)
    ("t1nm" "{T_1 \\cdot T_2 \\cdot ... \\cdot T_n}" nil :count 0)
    ("t1np" "{T_1 + T_2 + ... + T_n}" nil :count 0)
    ("t1npm" "{T_1 \\pm T_2 \\pm ... \\pm T_n}" nil :count 1)
    ("t2" "t_2" nil :count 5)
    ("t3" "t_3" nil :count 3)
    ("t4" "t_4" nil :count 1)
    ("t5" "t_5" nil :count 1)
    ("t6" "t_6" nil :count 0)
    ("t7" "t_7" nil :count 0)
    ("t8" "t_8" nil :count 0)
    ("t9" "t_9" nil :count 0)
    ("tau" "\\tau" nil :count 2)
    ("tf" "transform" nil :count 6)
    ("thet" "\\theta" nil :count 8)
    ("thet0" "\\theta_0" nil :count 0)
    ("thet1" "\\theta_1" nil :count 11)
    ("thet2" "\\theta_2" nil :count 1)
    ("thet3" "\\theta_3" nil :count 0)
    ("thet4" "\\theta_4" nil :count 0)
    ("thet5" "\\theta_5" nil :count 0)
    ("thet6" "\\theta_6" nil :count 0)
    ("thet7" "\\theta_7" nil :count 0)
    ("thet8" "\\theta_8" nil :count 0)
    ("thet9" "\\theta_9" nil :count 0)
    ("theta" "\\theta" nil :count 5)
    ("thy" "theory" nil :count 0)
    ("trad" "tradition" nil :count 1)
    ("trig" "trigonometr" nil :count 1)
    ("ts" "time series" nil :count 4)
    ("ucor" "uncorrelated" nil :count 5)
    ("unb" "unbiased" nil :count 2)
    ("uncor" "uncorrelated" nil :count 0)
    ("unif" "uniform" nil :count 0)
    ("uniq" "unique" nil :count 0)
    ("uvt" "univariate" nil :count 0)
    ("val" "value" nil :count 1)
    ("vals" "values" nil :count 0)
    ("vb" "variable" nil :count 1)
    ("vec" "vector" nil :count 0)
    ("vn" "variance" nil :count 1)
    ("vphi" "\\varphi" nil :count 7)
    ("vt" "variate" nil :count 0)
    ("wg" "weight" nil :count 2)
    ("wgd" "weighted" nil :count 2)
    ("wn" "white noise" nil :count 3)
    ("wrt" "with regard to" nil :count 0)
    ("wt" "with" nil :count 2)
    ("x0" "x_0" nil :count 0)
    ("x1" "x_1" nil :count 2)
    ("x1n" "{X_1, X_2, ..., X_n}" nil :count 1)
    ("x1nm" "{X_1 \\cdot X_2 \\cdot ... \\cdot X_n}" nil :count 0)
    ("x1np" "{X_1 + X_2 + ... + X_n}" nil :count 0)
    ("x1npm" "{X_1 \\pm X_2 \\pm ... \\pm X_n}" nil :count 0)
    ("x2" "x_2" nil :count 0)
    ("x3" "x_3" nil :count 0)
    ("x4" "x_4" nil :count 0)
    ("x5" "x_5" nil :count 0)
    ("x6" "x_6" nil :count 0)
    ("x7" "x_7" nil :count 0)
    ("x8" "x_8" nil :count 0)
    ("x9" "x_9" nil :count 0)
    ("xi" "\\xi" nil :count 3)
    ("xpc" "expected" nil :count 1)
    ("xpl" "explain" nil :count 0)
    ("xpn" "explanation" nil :count 0)
    ("xpo" "exponential" nil :count 0)
    ("xv" "cross-validation" nil :count 0)
    ("y0" "y_0" nil :count 0)
    ("y1" "y_1" nil :count 0)
    ("y1n" "{Y_1, Y_2, ..., Y_n}" nil :count 0)
    ("y1nm" "{Y_1 \\cdot Y_2 \\cdot ... \\cdot Y_n}" nil :count 0)
    ("y1np" "{Y_1 + Y_2 + ... + Y_n}" nil :count 0)
    ("y1npm" "{Y_1 \\pm Y_2 \\pm ... \\pm Y_n}" nil :count 0)
    ("y2" "y_2" nil :count 0)
    ("y3" "y_3" nil :count 0)
    ("y4" "y_4" nil :count 0)
    ("y5" "y_5" nil :count 0)
    ("y6" "y_6" nil :count 0)
    ("y7" "y_7" nil :count 0)
    ("y8" "y_8" nil :count 0)
    ("y9" "y_9" nil :count 0)
    ("yw" "Yule-Walker" nil :count 3)
   ))

