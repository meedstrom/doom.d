;;-*-coding: utf-8;-*-
(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("123n" "1, 2, 3, ..., n" nil :count 0)
    ("123nm" "1 \\cdot 2 \\cdot 3 \\cdot ... \\cdot n" nil :count 0)
    ("123np" "1 + 2 + 3 + ... + n" nil :count 0)
    ("123npm" "1 \\pm 2 \\pm 3 \\pm ... \\pm n" nil :count 0)
    ("1s" "one-sided" nil :count 0)
    ("2s" "two-sided" nil :count 0)
    ("Phi0" "\\Phi_0" nil :count 0)
    ("Phi1" "\\Phi_1" nil :count 13)
    ("Phi2" "\\Phi_2" nil :count 4)
    ("Phi3" "\\Phi_3" nil :count 2)
    ("Phi4" "\\Phi_4" nil :count 0)
    ("Phi5" "\\Phi_5" nil :count 0)
    ("Phi6" "\\Phi_6" nil :count 0)
    ("Phi7" "\\Phi_7" nil :count 0)
    ("Phi8" "\\Phi_8" nil :count 0)
    ("Phi9" "\\Phi_9" nil :count 0)
    ("abst" "abstract" nil :count 1)
    ("abt" "about" nil :count 1)
    ("acor" "autocorrelation" nil :count 4)
    ("acov" "autocovariance" nil :count 2)
    ("adj" "adjusted" nil :count 2)
    ("adjc" "adjacent" nil :count 1)
    ("aixi" "a_i X_i" nil :count 3)
    ("algo" "algorithm" nil :count 1)
    ("alp" "\\alpha" nil :count 0)
    ("alpha" "\\alpha" nil :count 2)
    ("als" "analysis" nil :count 0)
    ("alys" "analysis" nil :count 4)
    ("alz" "analyze" nil :count 1)
    ("app" "approach" nil :count 2)
    ("appx" "approximate" nil :count 0)
    ("ass" "assume" nil :count 2)
    ("assn" "assumption" nil :count 5)
    ("avg" "transform" nil :count 0)
    ("bc" "because" nil :count 0)
    ("beta" "\\beta" nil :count 31)
    ("betw" "between" nil :count 1)
    ("bjxj" "b_j X_j" nil :count 1)
    ("bn" "Bayesian" nil :count 2)
    ("brow" "Brownian" nil :count 3)
    ("btw" "by the way" nil :count 0)
    ("bxcx" "Box-Cox" nil :count 1)
    ("bxj" "Box-Jenkins" nil :count 1)
    ("cand" "candidate" nil :count 1)
    ("ccor" "cross-correlation" nil :count 1)
    ("ccov" "cross-covariance" nil :count 1)
    ("cf" "counterfactual" nil :count 0)
    ("chi" "\\chi" nil :count 1)
    ("chisq" "χ^2" nil :count 1)
    ("chk" "check" nil :count 1)
    ("cnt" "count" nil :count 1)
    ("coef" "coefficient" nil :count 2)
    ("coefs" "coefficients" nil :count 0)
    ("com" "common" nil :count 0)
    ("comb" "combination" nil :count 1)
    ("compl" "complement" nil :count 0)
    ("concl" "conclusion" nil :count 0)
    ("cons" "consistent" nil :count 3)
    ("const" "constant" nil :count 2)
    ("cont" "continuous" nil :count 0)
    ("contrib" "contribution" nil :count 0)
    ("cor" "correlation" nil :count 10)
    ("cord" "correlated" nil :count 0)
    ("cov" "covariance" nil :count 18)
    ("covt" "covariate" nil :count 0)
    ("coz" "cause" nil :count 0)
    ("ctg" "category" nil :count 0)
    ("cum" "cumulative" nil :count 0)
    ("def" "define" nil :count 0)
    ("defd" "defined" nil :count 0)
    ("defn" "definition" nil :count 0)
    ("delt" "\\delta" nil :count 1)
    ("delta" "\\delta" nil :count 4)
    ("dens" "density" nil :count 0)
    ("dep" "dependent" nil :count 2)
    ("dev" "deviation" nil :count 0)
    ("df" "degrees of freedom" nil :count 2)
    ("dim" "dimension" nil :count 3)
    ("dist" "distribution" nil :count 7)
    ("distd" "distributed" nil :count 1)
    ("ef" "effect" nil :count 0)
    ("eff" "efficient" nil :count 0)
    ("emp" "empirical" nil :count 0)
    ("eps" "\\epsilon" nil :count 9)
    ("epsilon" "\\epsilon" nil :count 5)
    ("eq" "equal" nil :count 1)
    ("eqn" "equation" nil :count 8)
    ("eqv" "equivalent" nil :count 0)
    ("err" "error" nil :count 3)
    ("est" "estimate" nil :count 11)
    ("estn" "estimation" nil :count 1)
    ("estr" "estimator" nil :count 4)
    ("ev" "event" nil :count 0)
    ("evl" "eventual" nil :count 0)
    ("evs" "events" nil :count 0)
    ("exp" "experiments" nil :count 1)
    ("fm" "formula" nil :count 0)
    ("fn" "function" nil :count 15)
    ("gam" "\\gamma" nil :count 43)
    ("gamma" "\\gamma" nil :count 10)
    ("gen" "general" nil :count 3)
    ("geom" "geometric" nil :count 5)
    ("gs" "Gaussian" nil :count 9)
    ("hyp" "hypothesis" nil :count 0)
    ("id" "identity" nil :count 0)
    ("imp" "important" nil :count 1)
    ("ind" "independent" nil :count 6)
    ("indep" "independent" nil :count 1)
    ("inf" "inference" nil :count 0)
    ("info" "information" nil :count 0)
    ("int" "intensity" nil :count 2)
    ("intv" "interval" nil :count 2)
    ("inv" "invert" nil :count 1)
    ("invy" "invertability" nil :count 1)
    ("lam" "\\lambda" nil :count 2)
    ("lambda" "\\lambda" nil :count 9)
    ("lbr" "｛" nil :count 1)
    ("lin" "linear" nil :count 4)
    ("lincomb" "linear combination" nil :count 4)
    ("log" "logarithm" nil :count 6)
    ("md" "model" nil :count 7)
    ("mlvl" "multilevel" nil :count 0)
    ("mot" "motion" nil :count 1)
    ("ms" "measure" nil :count 0)
    ("mtx" "matrix" nil :count 0)
    ("mu" "\\mu" nil :count 17)
    ("mvt" "multivariate" nil :count 0)
    ("nab" "\\nabla" nil :count 1)
    ("nabla" "\\nabla" nil :count 0)
    ("obs" "observation" nil :count 0)
    ("obv" "obviously" nil :count 0)
    ("omega" "\\omega" nil :count 4)
    ("opz" "optimize" nil :count 0)
    ("par" "parameter" nil :count 2)
    ("pbm" "problem" nil :count 1)
    ("pbmatic" "problematic" nil :count 0)
    ("phi" "\\phi" nil :count 68)
    ("pi" "\\pi" nil :count 3)
    ("po" "Poisson" nil :count 1)
    ("pop" "population" nil :count 0)
    ("poss" "possible" nil :count 2)
    ("pr" "probability" nil :count 0)
    ("prec" "precision" nil :count 0)
    ("pred" "predict" nil :count 0)
    ("predn" "prediction" nil :count 0)
    ("predr" "predictor" nil :count 1)
    ("predv" "predictive" nil :count 0)
    ("prev" "previous" nil :count 0)
    ("proc" "process" nil :count 25)
    ("procs" "processes" nil :count 2)
    ("prs" "probabilities" nil :count 0)
    ("rbr" "｝" nil :count 0)
    ("rea" "realization" nil :count 2)
    ("reg" "regular" nil :count 2)
    ("rel" "relation" nil :count 1)
    ("rep" "represented" nil :count 2)
    ("res" "residual" nil :count 4)
    ("resid" "residual" nil :count 1)
    ("resids" "residuals" nil :count 1)
    ("rgl" "regular" nil :count 0)
    ("rgr" "regression" nil :count 3)
    ("rho" "\\rho" nil :count 50)
    ("rsd" "residual" nil :count 0)
    ("saixi" "\\sum[a_i X_i]" nil :count 5)
    ("sam" "sample" nil :count 1)
    ("sbjxj" "\\sum[b_j X_j]" nil :count 1)
    ("sci" "science" nil :count 4)
    ("sd" "standard deviation" nil :count 1)
    ("se" "standard error" nil :count 0)
    ("sel" "selection" nil :count 1)
    ("seq" "sequence" nil :count 0)
    ("seql" "sequential" nil :count 0)
    ("sig" "significant" nil :count 4)
    ("sigma" "\\sigma" nil :count 14)
    ("sim" "simulate" nil :count 1)
    ("simn" "simulation" nil :count 0)
    ("spc" "space" nil :count 6)
    ("spr" "spread" nil :count 1)
    ("sq" "square" nil :count 1)
    ("srs" "series" nil :count 1)
    ("ssq" "\\sigma^2" nil :count 9)
    ("stat" "statistically" nil :count 0)
    ("stats" "statistics" nil :count 2)
    ("std" "standard" nil :count 0)
    ("stdd" "standardized" nil :count 0)
    ("stn" "stationary" nil :count 26)
    ("sto" "stochastic" nil :count 3)
    ("stoc" "stochastic" nil :count 4)
    ("str" "structure" nil :count 3)
    ("sup" "suppose" nil :count 0)
    ("surv" "survival" nil :count 0)
    ("t0" "t_0" nil :count 0)
    ("t1" "t_1" nil :count 4)
    ("t1n" "{T_1, T_2, ..., T_n}" nil :count 0)
    ("t1nm" "{T_1 \\cdot T_2 \\cdot ... \\cdot T_n}" nil :count 0)
    ("t1np" "{T_1 + T_2 + ... + T_n}" nil :count 0)
    ("t1npm" "{T_1 \\pm T_2 \\pm ... \\pm T_n}" nil :count 1)
    ("t2" "t_2" nil :count 5)
    ("t3" "t_3" nil :count 3)
    ("t4" "t_4" nil :count 1)
    ("t5" "t_5" nil :count 1)
    ("t6" "t_6" nil :count 0)
    ("t7" "t_7" nil :count 0)
    ("t8" "t_8" nil :count 0)
    ("t9" "t_9" nil :count 0)
    ("tau" "\\tau" nil :count 2)
    ("tf" "transform" nil :count 6)
    ("thet" "\\theta" nil :count 8)
    ("thet0" "\\theta_0" nil :count 0)
    ("thet1" "\\theta_1" nil :count 11)
    ("thet2" "\\theta_2" nil :count 1)
    ("thet3" "\\theta_3" nil :count 0)
    ("thet4" "\\theta_4" nil :count 0)
    ("thet5" "\\theta_5" nil :count 0)
    ("thet6" "\\theta_6" nil :count 0)
    ("thet7" "\\theta_7" nil :count 0)
    ("thet8" "\\theta_8" nil :count 0)
    ("thet9" "\\theta_9" nil :count 0)
    ("theta" "\\theta" nil :count 5)
    ("thy" "theory" nil :count 0)
    ("trad" "tradition" nil :count 1)
    ("trig" "trigonometr" nil :count 1)
    ("ts" "time series" nil :count 4)
    ("ucor" "uncorrelated" nil :count 5)
    ("unb" "unbiased" nil :count 2)
    ("uncor" "uncorrelated" nil :count 0)
    ("unif" "uniform" nil :count 0)
    ("uniq" "unique" nil :count 0)
    ("uvt" "univariate" nil :count 0)
    ("val" "value" nil :count 1)
    ("vals" "values" nil :count 0)
    ("vb" "variable" nil :count 1)
    ("vec" "vector" nil :count 0)
    ("vn" "variance" nil :count 1)
    ("vphi" "\\varphi" nil :count 7)
    ("vt" "variate" nil :count 0)
    ("wg" "weight" nil :count 2)
    ("wgd" "weighted" nil :count 2)
    ("wn" "white noise" nil :count 3)
    ("wrt" "with regard to" nil :count 0)
    ("wt" "with" nil :count 2)
    ("x0" "x_0" nil :count 0)
    ("x1" "x_1" nil :count 2)
    ("x1n" "{X_1, X_2, ..., X_n}" nil :count 1)
    ("x1nm" "{X_1 \\cdot X_2 \\cdot ... \\cdot X_n}" nil :count 0)
    ("x1np" "{X_1 + X_2 + ... + X_n}" nil :count 0)
    ("x1npm" "{X_1 \\pm X_2 \\pm ... \\pm X_n}" nil :count 0)
    ("x2" "x_2" nil :count 0)
    ("x3" "x_3" nil :count 0)
    ("x4" "x_4" nil :count 0)
    ("x5" "x_5" nil :count 0)
    ("x6" "x_6" nil :count 0)
    ("x7" "x_7" nil :count 0)
    ("x8" "x_8" nil :count 0)
    ("x9" "x_9" nil :count 0)
    ("xi" "\\xi" nil :count 3)
    ("xpc" "expected" nil :count 1)
    ("xpl" "explain" nil :count 0)
    ("xpn" "explanation" nil :count 0)
    ("xpo" "exponential" nil :count 0)
    ("xv" "cross-validation" nil :count 0)
    ("y0" "y_0" nil :count 0)
    ("y1" "y_1" nil :count 0)
    ("y1n" "{Y_1, Y_2, ..., Y_n}" nil :count 0)
    ("y1nm" "{Y_1 \\cdot Y_2 \\cdot ... \\cdot Y_n}" nil :count 0)
    ("y1np" "{Y_1 + Y_2 + ... + Y_n}" nil :count 0)
    ("y1npm" "{Y_1 \\pm Y_2 \\pm ... \\pm Y_n}" nil :count 0)
    ("y2" "y_2" nil :count 0)
    ("y3" "y_3" nil :count 0)
    ("y4" "y_4" nil :count 0)
    ("y5" "y_5" nil :count 0)
    ("y6" "y_6" nil :count 0)
    ("y7" "y_7" nil :count 0)
    ("y8" "y_8" nil :count 0)
    ("y9" "y_9" nil :count 0)
    ("yw" "Yule-Walker" nil :count 3)
   ))

(define-abbrev-table 'xah-elisp-mode-abbrev-table
  '(
    ("abbreviate-file-name" "(abbreviate-file-name ▮)" xah-elisp--ahf :count 0)
    ("add-hook" "(add-hook 'HOOK▮ 'FUNCTION)" xah-elisp--ahf :count 0)
    ("add-text-properties" "(add-text-properties p1▮ p2 PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("add-to-list" "(add-to-list LIST-VAR▮ ELEMENT &optional APPEND COMPARE-FN)" xah-elisp--ahf :count 0)
    ("ah" "add-hook" xah-elisp--ahf :count 0)
    ("alist-get" "(alist-get key▮ value &optional default)" xah-elisp--ahf :count 0)
    ("and" "(and ▮)" xah-elisp--ahf :count 0)
    ("append" "(append ▮)" xah-elisp--ahf :count 0)
    ("append-to-file" "(append-to-file p1▮ p2 FILENAME)" xah-elisp--ahf :count 0)
    ("apply" "(apply ▮)" xah-elisp--ahf :count 0)
    ("aref" "(aref ARRAY▮ INDEX)" xah-elisp--ahf :count 0)
    ("asc" "async-shell-command" xah-elisp--ahf :count 0)
    ("aset" "(aset ARRAY▮ IDX NEWELT)" xah-elisp--ahf :count 0)
    ("ask-user-about-supersession-threat" "(ask-user-about-supersession-threat FILENAME▮)" xah-elisp--ahf :count 0)
    ("assoc" "(assoc KEY▮ LIST)" xah-elisp--ahf :count 0)
    ("assoc-default" "(assoc-default key▮ alist &optional test default)" xah-elisp--ahf :count 0)
    ("assoc-string" "(assoc-string key▮ alist &optional case-fold)" xah-elisp--ahf :count 0)
    ("assq" "(assq key▮ alist)" xah-elisp--ahf :count 0)
    ("assq-delete-all" "(assq-delete-all key▮ alist)" xah-elisp--ahf :count 0)
    ("async-shell-command" "(async-shell-command ▮ &optional OUTPUT-BUFFER ERROR-BUFFER)" xah-elisp--ahf :count 0)
    ("atf" "append-to-file" xah-elisp--ahf :count 0)
    ("autoload" "(autoload 'FUNCNAME▮ \"FILENAME\" &optional \"DOCSTRING\" INTERACTIVE TYPE)" xah-elisp--ahf :count 0)
    ("backward-char" "(backward-char ▮)" xah-elisp--ahf :count 0)
    ("backward-up-list" "(backward-up-list &optional ARG▮ 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)" xah-elisp--ahf :count 0)
    ("backward-word" "(backward-word ▮)" xah-elisp--ahf :count 0)
    ("barf-if-buffer-read-only" "(barf-if-buffer-read-only)" xah-elisp--ahf :count 0)
    ("bc" "backward-char" xah-elisp--ahf :count 0)
    ("beginning-of-line" "(beginning-of-line)" xah-elisp--ahf :count 0)
    ("bfn" "buffer-file-name" xah-elisp--ahf :count 0)
    ("bmp" "buffer-modified-p" xah-elisp--ahf :count 0)
    ("bn" "buffer-name" xah-elisp--ahf :count 0)
    ("bol" "beginning-of-line" xah-elisp--ahf :count 0)
    ("botap" "bounds-of-thing-at-point" xah-elisp--ahf :count 0)
    ("boundp" "(boundp '▮)" xah-elisp--ahf :count 0)
    ("bounds-of-thing-at-point" "(bounds-of-thing-at-point 'symbol▮ 'filename 'word 'whitespace 'line)" xah-elisp--ahf :count 0)
    ("bs" "buffer-substring" xah-elisp--ahf :count 0)
    ("bsnp" "buffer-substring-no-properties" xah-elisp--ahf :count 0)
    ("buffer-base-buffer" "(buffer-base-buffer &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-chars-modified-tick" "(buffer-chars-modified-tick &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-file-name" "(buffer-file-name)" xah-elisp--ahf :count 0)
    ("buffer-list" "(buffer-list &optional FRAME▮)" xah-elisp--ahf :count 0)
    ("buffer-live-p" "(buffer-live-p OBJECT▮)" xah-elisp--ahf :count 0)
    ("buffer-modified-p" "(buffer-modified-p ▮)" xah-elisp--ahf :count 0)
    ("buffer-modified-tick" "(buffer-modified-tick &optional BUFFER▮)" xah-elisp--ahf :count 0)
    ("buffer-name" "(buffer-name &opt▮)" xah-elisp--ahf :count 0)
    ("buffer-substring" "(buffer-substring p1▮ p2)" xah-elisp--ahf :count 0)
    ("buffer-substring-no-properties" "(buffer-substring-no-properties p1▮ p2)" xah-elisp--ahf :count 0)
    ("buffer-swap-text" "(buffer-swap-text BUFFER▮)" xah-elisp--ahf :count 0)
    ("bufferp" "(bufferp ▮)" xah-elisp--ahf :count 0)
    ("bury-buffer" "(bury-buffer &optional BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("bw" "backward-word" xah-elisp--ahf :count 0)
    ("c" "concat" xah-elisp--ahf :count 0)
    ("ca" "char-after" xah-elisp--ahf :count 0)
    ("call-interactively" "(call-interactively 'FUNCTION▮ &optional RECORD-FLAG KEYS)" xah-elisp--ahf :count 0)
    ("call-process" "(call-process PROGRAM▮ &optional INFILE DESTINATION DISPLAY &rest ARGS)" xah-elisp--ahf :count 0)
    ("called-interactively-p" "(called-interactively-p 'interactive▮)" xah-elisp--ahf :count 0)
    ("car" "(car ▮)" xah-elisp--ahf :count 0)
    ("case-fold-search" "(case-fold-search nil)" xah-elisp--ahf :count 0)
    ("catch" "(catch 'TAG▮ BODY)" xah-elisp--ahf :count 0)
    ("cb" "current-buffer" xah-elisp--ahf :count 0)
    ("cc" "condition-case" xah-elisp--ahf :count 0)
    ("cd" "copy-directory" xah-elisp--ahf :count 0)
    ("cdr" "(cdr ▮)" xah-elisp--ahf :count 0)
    ("ce" "char-equal" xah-elisp--ahf :count 0)
    ("ceiling" "(ceiling ▮)" xah-elisp--ahf :count 0)
    ("cf" "copy-file" xah-elisp--ahf :count 0)
    ("cfs" "case-fold-search" xah-elisp--ahf :count 0)
    ("char-after" "(char-after &optional ▮POS)" xah-elisp--ahf :count 0)
    ("char-before" "(char-before &optional ▮POS)" xah-elisp--ahf :count 0)
    ("char-equal" "(char-equal char1▮ char1)" xah-elisp--ahf :count 0)
    ("char-to-string" "(char-to-string CHAR▮) " xah-elisp--ahf :count 0)
    ("clear-image-cache" "(clear-image-cache &optional FILTER▮)" xah-elisp--ahf :count 0)
    ("clear-visited-file-modtime" "(clear-visited-file-modtime)" xah-elisp--ahf :count 0)
    ("clone-indirect-buffer" "(clone-indirect-buffer NEWNAME▮ DISPLAY-FLAG &optional NORECORD)" xah-elisp--ahf :count 0)
    ("clrhash" "(clrhash ▮)" xah-elisp--ahf :count 0)
    ("compare-strings" "(compare-strings ▮ start1 end1 string2 start2 end2)" xah-elisp--ahf :count 0)
    ("concat" "(concat \"▮\" \"▮\")" xah-elisp--ahf :count 0)
    ("cond" "(cond
(CONDITION▮ BODY)
(CONDITION BODY)
)" xah-elisp--ahf :count 0)
    ("condition-case" "(condition-case ▮)" xah-elisp--ahf :count 0)
    ("cons" "(cons CAR▮ CDR)" xah-elisp--ahf :count 0)
    ("consp" "(consp ▮)" xah-elisp--ahf :count 0)
    ("constrain-to-field" "(constrain-to-field NEW-POS▮ OLD-POS &optional ESCAPE-FROM-EDGE ONLY-IN-LINE INHIBIT-CAPTURE-PROPERTY)" xah-elisp--ahf :count 0)
    ("copy-alist" "(copy-alist alist▮)" xah-elisp--ahf :count 0)
    ("copy-directory" "(copy-directory ▮ NEWNAME &optional KEEP-TIME PARENTS)" xah-elisp--ahf :count 0)
    ("copy-file" "(copy-file FILE▮ NEWNAME &optional OK-IF-ALREADY-EXISTS KEEP-TIME PRESERVE-UID-GID)" xah-elisp--ahf :count 0)
    ("cp" "call-process" xah-elisp--ahf :count 0)
    ("cpa" "current-prefix-arg" xah-elisp--ahf :count 0)
    ("create-image" "(create-image FILE-OR-DATA▮ &optional TYPE DATA-P &rest)" xah-elisp--ahf :count 0)
    ("cts" "(char-to-string CHAR▮) " xah-elisp--ahf :count 0)
    ("current-buffer" "(current-buffer)" xah-elisp--ahf :count 0)
    ("current-word" "(current-word)" xah-elisp--ahf :count 0)
    ("custom-autoload" "(custom-autoload ▮ SYMBOL LOAD &optional NOSET)" xah-elisp--ahf :count 0)
    ("cw" "current-word" xah-elisp--ahf :count 0)
    ("d" "defun" xah-elisp--ahf :count 0)
    ("daer" "delete-and-extract-region" xah-elisp--ahf :count 0)
    ("dc" "delete-char" xah-elisp--ahf :count 0)
    ("dd" "delete-directory" xah-elisp--ahf :count 0)
    ("dec" "(1- ▮)" xah-elisp--ahf :count 0)
    ("defalias" "(defalias 'SYMBOL▮ 'DEFINITION &optional DOCSTRING)" xah-elisp--ahf :count 0)
    ("defconst" "(defconst ▮ INITVALUE \"DOCSTRING\")" xah-elisp--ahf :count 0)
    ("defcustom" "(defcustom ▮ VALUE \"DOC\" &optional ARGS)" xah-elisp--ahf :count 0)
    ("defface" "(defface FACE▮ SPEC \"DOC\" &rest ARGS)" xah-elisp--ahf :count 0)
    ("defimage" "(defimage SYMBOL▮ SPECS &optional DOC)" xah-elisp--ahf :count 0)
    ("define-key" "(define-key KEYMAPNAME▮ (kbd \"M-b\") 'FUNCNAME)" xah-elisp--ahf :count 0)
    ("define-minor-mode" "(define-minor-mode MODE▮ \"DOC\" &optional INIT-VALUE LIGHTER KEYMAP &rest BODY)" xah-elisp--ahf :count 0)
    ("defsubst" "(defsubst ▮)" xah-elisp--ahf :count 0)
    ("defun" "(defun f▮ ()
  \"DOCSTRING\"
  (interactive)
  (let ()
3
 ))" xah-elisp--ahf :count 0)
    ("defvar" "(defvar ▮ &optional INITVALUE \"DOCSTRING\")" xah-elisp--ahf :count 0)
    ("delete" "(delete OBJECT▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("delete-and-extract-region" "(delete-and-extract-region ▮ pos2)" xah-elisp--ahf :count 0)
    ("delete-char" "(delete-char 1▮)" xah-elisp--ahf :count 0)
    ("delete-directory" "(delete-directory ▮ &optional RECURSIVE)" xah-elisp--ahf :count 0)
    ("delete-dups" "(delete-dups LIST▮)" xah-elisp--ahf :count 0)
    ("delete-field" "(delete-field &optional POS▮)" xah-elisp--ahf :count 0)
    ("delete-file" "(delete-file ▮)" xah-elisp--ahf :count 0)
    ("delete-region" "(delete-region p1▮ p2)" xah-elisp--ahf :count 0)
    ("delq" "(delq ELT▮ LIST)" xah-elisp--ahf :count 0)
    ("df" "delete-file" xah-elisp--ahf :count 0)
    ("dfr" "directory-files-recursively" xah-elisp--ahf :count 0)
    ("directory-file-name" "(directory-file-name ▮)" xah-elisp--ahf :count 0)
    ("directory-files" "(directory-files ▮ &optional FULL MATCH NOSORT)" xah-elisp--ahf :count 0)
    ("directory-files-recursively" "(directory-files-recursively DIR▮ REGEXP &optional INCLUDE-DIRECTORIES)" xah-elisp--ahf :count 0)
    ("directory-name-p" "(directory-name-p ▮)" xah-elisp--ahf :count 0)
    ("dk" "define-key" xah-elisp--ahf :count 0)
    ("dolist" "(dolist (x LIST▮ [RESULT]) BODY)" xah-elisp--ahf :count 0)
    ("dotimes" "(dotimes (i COUNT▮ [RESULT]) BODY)" xah-elisp--ahf :count 0)
    ("dr" "delete-region" xah-elisp--ahf :count 0)
    ("dv" "defvar" xah-elisp--ahf :count 0)
    ("eb" "erase-buffer" xah-elisp--ahf :count 0)
    ("efn" "expand-file-name" xah-elisp--ahf :count 0)
    ("elt" "(elt SEQUENCE▮ N)" xah-elisp--ahf :count 0)
    ("end-of-line" "(end-of-line ▮&optional N)" xah-elisp--ahf :count 0)
    ("eol" "end-of-line" xah-elisp--ahf :count 0)
    ("eq" "(eq ▮)" xah-elisp--ahf :count 0)
    ("equal" "(equal ▮)" xah-elisp--ahf :count 0)
    ("erase-buffer" "(erase-buffer)" xah-elisp--ahf :count 0)
    ("error" "(error \"%s\" ▮)" xah-elisp--ahf :count 0)
    ("expand-file-name" "(expand-file-name ▮ &optional relativedir)" xah-elisp--ahf :count 0)
    ("expt" "(expt ▮ y)" xah-elisp--ahf :count 0)
    ("f" "format" xah-elisp--ahf :count 0)
    ("fboundp" "(fboundp '▮)" xah-elisp--ahf :count 0)
    ("fc" "forward-char" xah-elisp--ahf :count 0)
    ("fceiling" "(fceiling ▮)" xah-elisp--ahf :count 0)
    ("featurep" "(featurep 'FEATURE▮)" xah-elisp--ahf :count 0)
    ("fep" "file-exists-p" xah-elisp--ahf :count 0)
    ("ff" "find-file" xah-elisp--ahf :count 0)
    ("ffloor" "(ffloor ▮)" xah-elisp--ahf :count 0)
    ("field-beginning" "(field-beginning &optional POS▮ ESCAPE-FROM-EDGE LIMIT)" xah-elisp--ahf :count 0)
    ("field-end" "(field-end &optional POS▮ ESCAPE-FROM-EDGE LIMIT)" xah-elisp--ahf :count 0)
    ("field-string" "(field-string &optional POS▮)" xah-elisp--ahf :count 0)
    ("field-string-no-properties" "(field-string-no-properties &optional POS▮)" xah-elisp--ahf :count 0)
    ("file-directory-p" "(file-directory-p ▮)" xah-elisp--ahf :count 0)
    ("file-exists-p" "(file-exists-p ▮)" xah-elisp--ahf :count 0)
    ("file-name-absolute-p" "(file-name-absolute-p ▮)" xah-elisp--ahf :count 0)
    ("file-name-as-directory" "(file-name-as-directory ▮)" xah-elisp--ahf :count 0)
    ("file-name-directory" "(file-name-directory ▮)" xah-elisp--ahf :count 0)
    ("file-name-extension" "(file-name-extension ▮ &optional PERIOD)" xah-elisp--ahf :count 0)
    ("file-name-nondirectory" "(file-name-nondirectory ▮)" xah-elisp--ahf :count 0)
    ("file-name-sans-extension" "(file-name-sans-extension ▮)" xah-elisp--ahf :count 0)
    ("file-regular-p" "(file-regular-p ▮)" xah-elisp--ahf :count 0)
    ("file-relative-name" "(file-relative-name ▮)" xah-elisp--ahf :count 0)
    ("fillarray" "(fillarray ARRAY▮ 0)" xah-elisp--ahf :count 0)
    ("find-buffer-visiting" "(find-buffer-visiting FILENAME▮ &optional PREDICATE)" xah-elisp--ahf :count 0)
    ("find-file" "(find-file ▮)" xah-elisp--ahf :count 0)
    ("find-image" "(find-image SPECS▮)" xah-elisp--ahf :count 0)
    ("fl" "forward-line" xah-elisp--ahf :count 0)
    ("floor" "(floor ▮)" xah-elisp--ahf :count 0)
    ("fnd" "file-name-directory" xah-elisp--ahf :count 0)
    ("fne" "file-name-extension" xah-elisp--ahf :count 0)
    ("fnn" "file-name-nondirectory" xah-elisp--ahf :count 0)
    ("fnse" "file-name-sans-extension" xah-elisp--ahf :count 0)
    ("font-lock-add-keywords" "(font-lock-add-keywords MODE▮ KEYWORDS &optional HOW)" xah-elisp--ahf :count 0)
    ("font-lock-fontify-buffer" "(font-lock-fontify-buffer ▮)" xah-elisp--ahf :count 0)
    ("format" "(format \"%s\" ▮)" xah-elisp--ahf :count 0)
    ("forward-char" "(forward-char ▮)" xah-elisp--ahf :count 0)
    ("forward-line" "(forward-line ▮)" xah-elisp--ahf :count 0)
    ("forward-word" "(forward-word ▮)" xah-elisp--ahf :count 0)
    ("frn" "file-relative-name" xah-elisp--ahf :count 0)
    ("fround" "(fround ▮)" xah-elisp--ahf :count 0)
    ("ftruncate" "(ftruncate ▮)" xah-elisp--ahf :count 0)
    ("funcall" "(funcall 'FUNCTION▮ &rest ARGUMENTS)" xah-elisp--ahf :count 0)
    ("function" "(function ▮)" xah-elisp--ahf :count 0)
    ("fw" "forward-word" xah-elisp--ahf :count 0)
    ("gap-position" "(gap-position)" xah-elisp--ahf :count 0)
    ("gap-size" "(gap-size)" xah-elisp--ahf :count 0)
    ("gb" "get-buffer" xah-elisp--ahf :count 0)
    ("gbc" "get-buffer-create" xah-elisp--ahf :count 0)
    ("gc" "goto-char" xah-elisp--ahf :count 0)
    ("generate-new-buffer" "(generate-new-buffer ▮)" xah-elisp--ahf :count 0)
    ("generate-new-buffer-name" "(generate-new-buffer-name STARTING-NAME▮ &optional IGNORE)" xah-elisp--ahf :count 0)
    ("get" "(get SYMBOL▮ 'PROPNAME)" xah-elisp--ahf :count 0)
    ("get-buffer" "(get-buffer BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("get-buffer-create" "(get-buffer-create BUFFER-OR-NAME▮)" xah-elisp--ahf :count 0)
    ("get-char-code-property" "(get-char-code-property CHAR▮ PROPNAME)" xah-elisp--ahf :count 0)
    ("get-char-property" "(get-char-property POSITION▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("get-char-property-and-overlay" "(get-char-property-and-overlay POSITION▮ PROP &optional)" xah-elisp--ahf :count 0)
    ("get-file-buffer" "(get-file-buffer FILENAME▮)" xah-elisp--ahf :count 0)
    ("get-pos-property" "(get-pos-property POSITION▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("get-text-property" "(get-text-property POS▮ PROP &optional OBJECT)" xah-elisp--ahf :count 0)
    ("gethash" "(gethash KEY▮ TABLE &optional DFLT)" xah-elisp--ahf :count 0)
    ("global-set-key" "(global-set-key (kbd \"C-▮\") 'COMMAND)" xah-elisp--ahf :count 0)
    ("gnb" "generate-new-buffer" xah-elisp--ahf :count 0)
    ("goto-char" "(goto-char ▮)" xah-elisp--ahf :count 0)
    ("gsk" "global-set-key" xah-elisp--ahf :count 0)
    ("gt" "(> ▮)" xah-elisp--ahf :count 0)
    ("gte" "(>= ▮)" xah-elisp--ahf :count 0)
    ("gtp " "get-text-property" xah-elisp--ahf :count 0)
    ("i" "insert" xah-elisp--ahf :count 0)
    ("if" "(if ▮
    (progn )
  (progn )
)" xah-elisp--ahf :count 0)
    ("ifc" "insert-file-contents" xah-elisp--ahf :count 0)
    ("image-flush" "(image-flush SPEC▮ &optional FRAME)" xah-elisp--ahf :count 0)
    ("image-load-path-for-library" "(image-load-path-for-library LIBRARY▮ IMAGE &optional PATH)" xah-elisp--ahf :count 0)
    ("image-size" "(image-size SPEC▮ &optional PIXELS FRAME)" xah-elisp--ahf :count 0)
    ("inc" "(1+ ▮)" xah-elisp--ahf :count 0)
    ("insert" "(insert ▮)" xah-elisp--ahf :count 0)
    ("insert-and-inherit" "(insert-and-inherit ▮)" xah-elisp--ahf :count 0)
    ("insert-before-markers-and-inherit" "(insert-before-markers-and-inherit ▮)" xah-elisp--ahf :count 0)
    ("insert-char" "(insert-char CHARACTER▮ &optional COUNT INHERIT)" xah-elisp--ahf :count 0)
    ("insert-file-contents" "(insert-file-contents ▮ &optional VISIT p1▮ p2 REPLACE)" xah-elisp--ahf :count 0)
    ("insert-image" "(insert-image IMAGE▮ &optional STRING AREA SLICE)" xah-elisp--ahf :count 0)
    ("insert-sliced-image" "(insert-sliced-image IMAGE▮ &optional STRING AREA ROWS COLS)" xah-elisp--ahf :count 0)
    ("interactive" "(interactive)" xah-elisp--ahf :count 0)
    ("kb" "kill-buffer" xah-elisp--ahf :count 0)
    ("kbd" "(kbd \"▮\")" xah-elisp--ahf :count 0)
    ("kill-append" "(kill-append STRING▮ BEFORE-P)" xah-elisp--ahf :count 0)
    ("kill-buffer" "(kill-buffer ▮)" xah-elisp--ahf :count 0)
    ("kill-region" "(kill-region p1▮ p2 &optional REGION)" xah-elisp--ahf :count 0)
    ("kr" "kill-region" xah-elisp--ahf :count 0)
    ("l" "let" xah-elisp--ahf :count 0)
    ("la" "looking-at" xah-elisp--ahf :count 0)
    ("lam" "lambda" xah-elisp--ahf :count 0)
    ("lambda" "(lambda (x▮) BODY)" xah-elisp--ahf :count 0)
    ("last-buffer" "(last-buffer &optional BUFFER▮ VISIBLE-OK FRAME)" xah-elisp--ahf :count 0)
    ("lb" "looking-back" xah-elisp--ahf :count 0)
    ("lbp" "(line-beginning-position)" xah-elisp--ahf :count 0)
    ("lc" "left-char" xah-elisp--ahf :count 0)
    ("left-char" "(left-char ▮)" xah-elisp--ahf :count 0)
    ("len" "length" xah-elisp--ahf :count 0)
    ("length" "(length ▮)" xah-elisp--ahf :count 0)
    ("lep" "(line-end-position)" xah-elisp--ahf :count 0)
    ("let" "(let (▮)
 x
)" xah-elisp--ahf :count 0)
    ("let*" "(let* (▮)
 x
)" xah-elisp--ahf :count 0)
    ("line-beginning-position" "(line-beginning-position)" xah-elisp--ahf :count 0)
    ("line-end-position" "(line-end-position)" xah-elisp--ahf :count 0)
    ("list" "(list ▮)" xah-elisp--ahf :count 0)
    ("load" "(load FILE▮ &optional NOERROR NOMESSAGE NOSUFFIX MUST-SUFFIX)" xah-elisp--ahf :count 0)
    ("load-file" "(load-file FILE▮)" xah-elisp--ahf :count 0)
    ("local-set-key" "(local-set-key (kbd \"C-▮\") 'COMMAND)" xah-elisp--ahf :count 0)
    ("looking-at" "(looking-at \"REGEXP▮\")" xah-elisp--ahf :count 0)
    ("looking-back" "(looking-back \"REGEXP▮\" LIMIT &optional GREEDY)" xah-elisp--ahf :count 0)
    ("ls" "let*" xah-elisp--ahf :count 0)
    ("lsk" "local-set-key" xah-elisp--ahf :count 0)
    ("lt" "(< ▮)" xah-elisp--ahf :count 0)
    ("lte" "(<= ▮)" xah-elisp--ahf :count 0)
    ("m" "message" xah-elisp--ahf :count 0)
    ("make-directory" "(make-directory ▮ &optional PARENTS)" xah-elisp--ahf :count 0)
    ("make-hash-table" "(make-hash-table :test 'equal ▮ &rest KEYWORD-ARGS)" xah-elisp--ahf :count 0)
    ("make-indirect-buffer" "(make-indirect-buffer BASE-BUFFER▮ NAME &optional CLONE)" xah-elisp--ahf :count 0)
    ("make-list" "(make-list LENGTH▮ INIT)" xah-elisp--ahf :count 0)
    ("make-local-variable" "(make-local-variable ▮)" xah-elisp--ahf :count 0)
    ("make-string" "(make-string count character)" xah-elisp--ahf :count 0)
    ("make-vector" "(make-vector 5▮ 0)" xah-elisp--ahf :count 0)
    ("mapc" "(mapc 
(lambda (x▮) BODY)
 SEQUENCE)" xah-elisp--ahf :count 0)
    ("mapcar" "(mapcar 
(lambda (x▮) BODY)
 SEQUENCE)" xah-elisp--ahf :count 0)
    ("mapconcat" "(mapconcat FUNCTION▮ SEQUENCE SEPARATOR)" xah-elisp--ahf :count 0)
    ("maphash" "(maphash FUNCTION▮ TABLE)" xah-elisp--ahf :count 0)
    ("match-beginning" "(match-beginning 0▮)" xah-elisp--ahf :count 0)
    ("match-data" "(match-data &optional INTEGERS▮ REUSE RESEAT)" xah-elisp--ahf :count 0)
    ("match-end" "(match-end 0▮)" xah-elisp--ahf :count 0)
    ("match-string" "(match-string 1▮ &optional STRING)" xah-elisp--ahf :count 0)
    ("match-string-no-properties" "(match-string-no-properties 1▮ &optional STRING)" xah-elisp--ahf :count 0)
    ("max" "(max ▮)" xah-elisp--ahf :count 0)
    ("mb" "match-beginning" xah-elisp--ahf :count 0)
    ("mc" "mapcar" xah-elisp--ahf :count 0)
    ("md" "make-directory" xah-elisp--ahf :count 0)
    ("me" "match-end" xah-elisp--ahf :count 0)
    ("member" "(member OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("member-ignore-case" "(member-ignore-case OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("memq" "(memq ELT▮ LIST)" xah-elisp--ahf :count 0)
    ("memql" "(memql OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("message" "(message \"%s▮\" ARGS)" xah-elisp--ahf :count 0)
    ("minus" "(- ▮)" xah-elisp--ahf :count 0)
    ("ml" "make-list" xah-elisp--ahf :count 0)
    ("mlv" "make-local-variable" xah-elisp--ahf :count 0)
    ("ms" "match-string" xah-elisp--ahf :count 0)
    ("msnp" "match-string-no-properties" xah-elisp--ahf :count 0)
    ("mv" "make-vector" xah-elisp--ahf :count 0)
    ("narrow-to-region" "(save-restriction
    (narrow-to-region p1▮ p2)

    )" xah-elisp--ahf :count 0)
    ("next-char-property-change" "(next-char-property-change POS &optional LIMIT)" xah-elisp--ahf :count 0)
    ("next-property-change" "(next-property-change POS &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("next-single-char-property-change" "(next-single-char-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("next-single-property-change" "(next-single-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("not" "(not ▮)" xah-elisp--ahf :count 0)
    ("not-modified" "(not-modified &optional ARG▮)" xah-elisp--ahf :count 0)
    ("ns" "number-sequence" xah-elisp--ahf :count 0)
    ("nth" "(nth N▮ LIST)" xah-elisp--ahf :count 0)
    ("ntr" "narrow-to-region" xah-elisp--ahf :count 0)
    ("nts" "number-to-string" xah-elisp--ahf :count 0)
    ("null" "(null ▮)" xah-elisp--ahf :count 0)
    ("number-sequence" "(number-sequence FROM▮ &optional TO INC)" xah-elisp--ahf :count 0)
    ("number-to-string" "(number-to-string ▮)" xah-elisp--ahf :count 0)
    ("opt" "&optional " xah-elisp--ahf :count 0)
    ("or" "(or ▮)" xah-elisp--ahf :count 0)
    ("other-buffer" "(other-buffer &optional BUFFER▮ VISIBLE-OK FRAME)" xah-elisp--ahf :count 0)
    ("p" "point" xah-elisp--ahf :count 0)
    ("plus" "(+ ▮)" xah-elisp--ahf :count 0)
    ("pm" "point-min" xah-elisp--ahf :count 0)
    ("pn" "progn" xah-elisp--ahf :count 0)
    ("point" "(point)" xah-elisp--ahf :count 0)
    ("point-max" "(point-max)" xah-elisp--ahf :count 0)
    ("point-min" "(point-min)" xah-elisp--ahf :count 0)
    ("pop" "(pop ▮)" xah-elisp--ahf :count 0)
    ("previous-char-property-change" "(previous-char-property-change POS &optional LIMIT)" xah-elisp--ahf :count 0)
    ("previous-property-change" "(previous-property-change POS &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("previous-single-char-property-change" "(previous-single-char-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("previous-single-property-change" "(previous-single-property-change POS PROP &optional OBJECT LIMIT)" xah-elisp--ahf :count 0)
    ("prin1" "(prin1 ▮)" xah-elisp--ahf :count 0)
    ("prin1-to-string" "(prin1-to-string▮ OBJECT &optional NOESCAPE)" xah-elisp--ahf :count 0)
    ("princ" "(princ ▮)" xah-elisp--ahf :count 0)
    ("print" "(print ▮)" xah-elisp--ahf :count 0)
    ("prog1" "(prog1
▮)" xah-elisp--ahf :count 0)
    ("prog2" "(prog2
▮)" xah-elisp--ahf :count 0)
    ("progn" "(progn
▮)" xah-elisp--ahf :count 0)
    ("propertize" "(propertize STRING▮ &rest PROPERTIES)" xah-elisp--ahf :count 0)
    ("ptp" "put-text-property" xah-elisp--ahf :count 0)
    ("push" "(push NEWELT▮ PLACE)" xah-elisp--ahf :count 0)
    ("push-mark" "(push-mark ▮&optional LOCATION NOMSG ACTIVATE)" xah-elisp--ahf :count 0)
    ("put" "(put 'SYMBOL▮ 'PROPNAME VALUE)" xah-elisp--ahf :count 0)
    ("put-image" "(put-image IMAGE▮ POS &optional STRING AREA)" xah-elisp--ahf :count 0)
    ("put-text-property" "(put-text-property p1▮ p2 PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("puthash" "(puthash KEY▮ VALUE TABLE)" xah-elisp--ahf :count 0)
    ("px" "point-max" xah-elisp--ahf :count 0)
    ("random" "(random ▮)" xah-elisp--ahf :count 0)
    ("rap" "region-active-p" xah-elisp--ahf :count 0)
    ("rassoc" "(rassoc value▮ alist)" xah-elisp--ahf :count 0)
    ("rassq" "(rassq value▮ alist)" xah-elisp--ahf :count 0)
    ("rassq-delete-all" "(rassq-delete-all value▮ alist)" xah-elisp--ahf :count 0)
    ("rb" "region-beginning" xah-elisp--ahf :count 0)
    ("rc" "right-char" xah-elisp--ahf :count 0)
    ("rdn" "read-directory-name" xah-elisp--ahf :count 0)
    ("re" "region-end" xah-elisp--ahf :count 0)
    ("re-search-backward" "(re-search-backward \"REGEXP▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("re-search-forward" "(re-search-forward \"REGEXP▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("read-directory-name" "(read-directory-name \"Dir▮:\" &optional DIR DEFAULT-DIRNAME MUSTMATCH INITIAL)" xah-elisp--ahf :count 0)
    ("read-file-name" "(read-file-name \"▮\" &optional DIR DEFAULT-FILENAME MUSTMATCH INITIAL PREDICATE)" xah-elisp--ahf :count 0)
    ("read-number" "(read-number \"Number▮:\" DEFAULT?)" xah-elisp--ahf :count 0)
    ("read-regexp" "(read-regexp \"Type regex▮:\" &optional DEFAULT-VALUE)" xah-elisp--ahf :count 0)
    ("read-string" "(read-string \"What▮:\" &optional INITIAL-INPUT HISTORY DEFAULT-VALUE INHERIT-INPUT-METHOD)" xah-elisp--ahf :count 0)
    ("regexp-opt" "(regexp-opt STRINGS▮ &optional PAREN)" xah-elisp--ahf :count 0)
    ("regexp-quote" "(regexp-quote ▮)" xah-elisp--ahf :count 0)
    ("region-active-p" "(region-active-p)" xah-elisp--ahf :count 0)
    ("region-beginning" "(region-beginning)" xah-elisp--ahf :count 0)
    ("region-end" "(region-end)" xah-elisp--ahf :count 0)
    ("remhash" "(remhash KEY▮ TABLE)" xah-elisp--ahf :count 0)
    ("remove" "(remove OBJECT▮ SEQUENCE)" xah-elisp--ahf :count 0)
    ("remove-images" "(remove-images p1▮ p2 &optional BUFFER)" xah-elisp--ahf :count 0)
    ("remove-list-of-text-properties" "(remove-list-of-text-properties p1▮ p2 LIST OF PROPERTIES &optional OBJECT)" xah-elisp--ahf :count 0)
    ("remove-text-properties" "(remove-text-properties p1▮ p2 PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("remq" "(remq OBJECT▮ LIST)" xah-elisp--ahf :count 0)
    ("rename-buffer" "(rename-buffer NEWNAME▮ &optional UNIQUE)" xah-elisp--ahf :count 0)
    ("rename-file" "(rename-file FILE▮ NEWNAME &optional OK-IF-ALREADY-EXISTS)" xah-elisp--ahf :count 0)
    ("repeat" "(repeat ▮)" xah-elisp--ahf :count 0)
    ("replace-match" "(replace-match NEWTEXT▮ &optional FIXEDCASE LITERAL STRING SUBEXP)" xah-elisp--ahf :count 0)
    ("replace-regexp" "(replace-regexp \"REGEXP▮\" TO-STRING &optional DELIMITED START END)" xah-elisp--ahf :count 0)
    ("replace-regexp-in-string" "(replace-regexp-in-string \"REGEXP▮\" REP STRING &optional FIXEDCASE LITERAL SUBEXP START)" xah-elisp--ahf :count 0)
    ("require" "(require ▮)" xah-elisp--ahf :count 0)
    ("restore-buffer-modified-p" "(restore-buffer-modified-p FLAG▮)" xah-elisp--ahf :count 0)
    ("reverse" "(reverse ▮)" xah-elisp--ahf :count 0)
    ("rf" "rename-file" xah-elisp--ahf :count 0)
    ("rfn" "read-file-name" xah-elisp--ahf :count 0)
    ("right-char" "(right-char ▮)" xah-elisp--ahf :count 0)
    ("rm" "replace-match" xah-elisp--ahf :count 0)
    ("rn" "read-number" xah-elisp--ahf :count 0)
    ("round" "(round ▮)" xah-elisp--ahf :count 0)
    ("rq" "regexp-quote" xah-elisp--ahf :count 0)
    ("rr" "replace-regexp" xah-elisp--ahf :count 0)
    ("rris" "replace-regexp-in-string" xah-elisp--ahf :count 0)
    ("rs" "read-string" xah-elisp--ahf :count 0)
    ("rsb" "re-search-backward" xah-elisp--ahf :count 0)
    ("rsf" "re-search-forward" xah-elisp--ahf :count 0)
    ("run-with-timer" "(run-with-timer SECS▮ REPEAT FUNCTION &rest ARGS)" xah-elisp--ahf :count 0)
    ("s" "setq" xah-elisp--ahf :count 0)
    ("save-buffer" "(save-buffer &optional ARG▮)" xah-elisp--ahf :count 0)
    ("save-current-buffer" "(save-current-buffer ▮)" xah-elisp--ahf :count 0)
    ("save-excursion" "(save-excursion ▮)" xah-elisp--ahf :count 0)
    ("save-restriction" "(save-restriction
    (narrow-to-region p1▮ p2)

    )" xah-elisp--ahf :count 0)
    ("sb" "search-backward" xah-elisp--ahf :count 0)
    ("sbr" "search-backward-regexp" xah-elisp--ahf :count 0)
    ("sc" "shell-command" xah-elisp--ahf :count 0)
    ("scb" "skip-chars-backward" xah-elisp--ahf :count 0)
    ("scf" "skip-chars-forward" xah-elisp--ahf :count 0)
    ("sd" "setq-default" xah-elisp--ahf :count 0)
    ("se" "save-excursion" xah-elisp--ahf :count 0)
    ("search-backward" "(search-backward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-backward-regexp" "(re-search-backward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-forward" "(search-forward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("search-forward-regexp" "(re-search-forward \"▮\" &optional BOUND NOERROR COUNT)" xah-elisp--ahf :count 0)
    ("set-buffer" "(set-buffer ▮)" xah-elisp--ahf :count 0)
    ("set-buffer-modified-p" "(set-buffer-modified-p FLAG▮)" xah-elisp--ahf :count 0)
    ("set-file-modes" "(set-file-modes ▮ MODE)" xah-elisp--ahf :count 0)
    ("set-mark" "(set-mark ▮)" xah-elisp--ahf :count 0)
    ("set-syntax-table" "(set-syntax-table ▮)" xah-elisp--ahf :count 0)
    ("set-text-properties" "(set-text-properties p1▮ p2 PROPS &optional OBJECT)" xah-elisp--ahf :count 0)
    ("set-visited-file-modtime" "(set-visited-file-modtime &optional TIME▮)" xah-elisp--ahf :count 0)
    ("set-visited-file-name" "(set-visited-file-name FILENAME▮ &optional NO-QUERY ALONG-WITH-FILE)" xah-elisp--ahf :count 0)
    ("setq" "(setq ▮)" xah-elisp--ahf :count 0)
    ("setq-default" "(setq-default x▮ VAL)" xah-elisp--ahf :count 0)
    ("sf" "search-forward" xah-elisp--ahf :count 0)
    ("sfm" "set-file-modes" xah-elisp--ahf :count 0)
    ("sfr" "re-search-forward" xah-elisp--ahf :count 0)
    ("shell-command" "(shell-command ▮ &optional OUTPUT-BUFFER ERROR-BUFFER)" xah-elisp--ahf :count 0)
    ("shell-quote-argument" "(shell-quote-argument ▮)" xah-elisp--ahf :count 0)
    ("skip-chars-backward" "(skip-chars-backward \"▮\" &optional LIM)" xah-elisp--ahf :count 0)
    ("skip-chars-forward" "(skip-chars-forward \"▮\" &optional LIM)" xah-elisp--ahf :count 0)
    ("sm" "string-match" xah-elisp--ahf :count 0)
    ("snp" "substring-no-properties" xah-elisp--ahf :count 0)
    ("sp" "start-process" xah-elisp--ahf :count 0)
    ("split-string" "(split-string ▮ &optional SEPARATORS OMIT-NULLS)" xah-elisp--ahf :count 0)
    ("sqa" "shell-quote-argument" xah-elisp--ahf :count 0)
    ("sr" "save-restriction" xah-elisp--ahf :count 0)
    ("ss" "split-string" xah-elisp--ahf :count 0)
    ("ssnp" "substring-no-properties" xah-elisp--ahf :count 0)
    ("start-process" "(start-process NAME BUFFER PROGRAM▮ &rest PROGRAM-ARGS)" xah-elisp--ahf :count 0)
    ("stb" "switch-to-buffer" xah-elisp--ahf :count 0)
    ("stc" "(string-to-char \"▮\")" xah-elisp--ahf :count 0)
    ("ste" "string-equal" xah-elisp--ahf :count 0)
    ("stn" "string-to-number" xah-elisp--ahf :count 0)
    ("string-collate-equalp" "(string-collate-equalp ▮ string2 &optional locale)" xah-elisp--ahf :count 0)
    ("string-collate-lessp" "(string-collate-lessp ▮ string2 &optional locale)" xah-elisp--ahf :count 0)
    ("string-equal" "(string-equal ▮ str2)" xah-elisp--ahf :count 0)
    ("string-greaterp" "(string-greaterp ▮ string2)" xah-elisp--ahf :count 0)
    ("string-lessp" "(string-lessp ▮ string2)" xah-elisp--ahf :count 0)
    ("string-match" "(string-match \"REGEXP\" STRING▮ &optional START)" xah-elisp--ahf :count 0)
    ("string-match-p" "(string-match-p \"REGEXP\" ▮ &optional START)" xah-elisp--ahf :count 0)
    ("string-prefix-p" "(string-prefix-p prefix▮ string2 &optional ignore-case)" xah-elisp--ahf :count 0)
    ("string-suffix-p" "(string-suffix-p suffix▮ string &optional ignore-case)" xah-elisp--ahf :count 0)
    ("string-to-char" "(string-to-char \"▮\")" xah-elisp--ahf :count 0)
    ("string-to-number" "(string-to-number \"▮\")" xah-elisp--ahf :count 0)
    ("string=" "(string-equal ▮ str2)" xah-elisp--ahf :count 0)
    ("stringp" "(stringp ▮)" xah-elisp--ahf :count 0)
    ("subs" "substring" xah-elisp--ahf :count 0)
    ("substring" "(substring STRING▮ FROM &optional TO)" xah-elisp--ahf :count 0)
    ("substring-no-properties" "(substring-no-properties ▮ FROM TO)" xah-elisp--ahf :count 0)
    ("switch-to-buffer" "(switch-to-buffer ▮ &optional NORECORD FORCE-SAME-WINDOW)" xah-elisp--ahf :count 0)
    ("tap" "thing-at-point" xah-elisp--ahf :count 0)
    ("terpri" "(terpri ▮)" xah-elisp--ahf :count 0)
    ("text-properties-at" "(text-properties-at POSITION▮ &optional OBJECT)" xah-elisp--ahf :count 0)
    ("text-property-any" "(text-property-any p1▮ p2 PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("text-property-not-all" "(text-property-not-all p1▮ p2 PROP VALUE &optional OBJECT)" xah-elisp--ahf :count 0)
    ("thing-at-point" "(thing-at-point 'word▮ 'symbol 'list 'sexp 'defun 'filename 'url 'email 'sentence 'whitespace 'line 'number 'page)" xah-elisp--ahf :count 0)
    ("throw" "(throw 'TAG▮ VALUE)" xah-elisp--ahf :count 0)
    ("toggle-read-only" "(toggle-read-only &optional ARG▮)" xah-elisp--ahf :count 0)
    ("truncate" "(truncate ▮)" xah-elisp--ahf :count 0)
    ("ue" "user-error" xah-elisp--ahf :count 0)
    ("unbury-buffer" "(unbury-buffer)" xah-elisp--ahf :count 0)
    ("unless" "(unless ▮)" xah-elisp--ahf :count 0)
    ("urp" "use-region-p" xah-elisp--ahf :count 0)
    ("use-region-p" "(use-region-p)" xah-elisp--ahf :count 0)
    ("user-error" "(user-error \"%s▮\" &rest ARGS)" xah-elisp--ahf :count 0)
    ("vc" "vconcat" xah-elisp--ahf :count 0)
    ("vconcat" "(vconcat SEQUENCES▮)" xah-elisp--ahf :count 0)
    ("vector" "(vector ▮)" xah-elisp--ahf :count 0)
    ("verify-visited-file-modtime" "(verify-visited-file-modtime BUFFER▮)" xah-elisp--ahf :count 0)
    ("version<" "(version< \"27.1\" emacs-version)" xah-elisp--ahf :count 0)
    ("version<=" "(version<= \"27.1\" emacs-version)" xah-elisp--ahf :count 0)
    ("visited-file-modtime" "(visited-file-modtime)" xah-elisp--ahf :count 0)
    ("w" "when" xah-elisp--ahf :count 0)
    ("wcb" "with-current-buffer" xah-elisp--ahf :count 0)
    ("wg" "widget-get" xah-elisp--ahf :count 0)
    ("when" "(when ▮)" xah-elisp--ahf :count 0)
    ("while" "(while (search-forward ▮ &optional BOUND NOERROR COUNT)
(replace-match NEWTEXT &optional FIXEDCASE LITERAL STRING SUBEXP))" xah-elisp--ahf :count 0)
    ("widen" "(widen)" xah-elisp--ahf :count 0)
    ("widget-get" "(widget-get ▮)" xah-elisp--ahf :count 0)
    ("with-current-buffer" "(with-current-buffer BUFFER-OR-NAME▮ BODY)" xah-elisp--ahf :count 0)
    ("with-output-to-string" "(with-output-to-string BODY▮)" xah-elisp--ahf :count 0)
    ("with-output-to-temp-buffer" "(with-output-to-temp-buffer BUFNAME▮ &rest BODY)" xah-elisp--ahf :count 0)
    ("with-temp-buffer" "(with-temp-buffer ▮)" xah-elisp--ahf :count 0)
    ("with-temp-file" "(with-temp-file FILE▮ BODY)" xah-elisp--ahf :count 0)
    ("wots" "with-output-to-string" xah-elisp--ahf :count 0)
    ("wr" "write-region" xah-elisp--ahf :count 0)
    ("write-char" "(write-char CHARACTER▮ &optional STREAM)" xah-elisp--ahf :count 0)
    ("write-file" "(write-file FILENAME▮ &optional CONFIRM)" xah-elisp--ahf :count 0)
    ("write-region" "(write-region (point-min) (point-max) FILENAME▮ &optional APPEND VISIT LOCKNAME MUSTBENEW)" xah-elisp--ahf :count 0)
    ("wtb" "with-temp-buffer" xah-elisp--ahf :count 0)
    ("wtf" "with-temp-file" xah-elisp--ahf :count 0)
    ("y-or-n-p" "(y-or-n-p \"PROMPT▮ \")" xah-elisp--ahf :count 0)
    ("yes-or-no-p" "(yes-or-no-p \"PROMPT▮ \")" xah-elisp--ahf :count 0)
    ("yonp" "yes-or-no-p" xah-elisp--ahf :count 0)
   ))

