;; -*- lexical-binding: t; -*-

;;; WIP: Make an Atom/RSS feed of my website
;; unused for now

;; see syntax on https://validator.w3.org/feed/docs/atom.html
(defun my-make-atom-feed ()
  (with-temp-file "/tmp/atom.xml"
    (insert"<?xml version=\"1.0\" encoding=\"utf-8\"?>
<feed xmlns=\"http://www.w3.org/2005/Atom\">
  <title>Martin Edström's notes</title>
  <link href=\"https://edstrom.dev\"/>
  <updated>" (format-time-string "%FT%TZ") "</updated>
  <author>
    <name>Martin Edström</name>
  </author>
  <rights> © 2023 Martin Edström </rights>
  <id>https://edstrom.dev</id>")

    ;; TODO: now insert something like this. for every month generated by my news
    ;; generator `my-make-changelog'...
    (let ((title "Changelog March 2023")
          (updated "2023-04-01")
          (month-post-url "https://edstrom.dev/posts/changelog-2023-03")
          (month-post-org-id "61a76c80-d399-11d9-b93c-0003939e0af6")
          (content "this string should be the entire content of the news post"))
      (insert "
  <entry>
    <title>" title "</title>
    <link href=\"" month-post-url "\" />
    <id>urn:uuid:" month-post-org-id "</id>
    <updated>" updated "</updated>
    <content type=\"html\">" content "</content>
  </entry>"))

    ;; TODO: down the line, maybe also insert standalone entries for new pages I
    ;; deem particularly "bloggable".  These would also be linked inside the monthly
    ;; news pages, so whoever doesn't use the feed can still see them pointed out there.

    (insert "
</feed>")))


;; 2023-09-21: Idea... now that my posts get permalinks, determined by the
;; org-id, it occurred to me I may not need a renames-table.  Just, uh, briefly
;; checkout every single commit (!) to record the org-id of each file that was
;; modified in that commit.  Naturally, we ignore files that don't have org-ids
;; (this misses some distant history, but I wasn't planning on generating news
;; from before 2023).
;;
;; Then associate the N-lines-changed with the org-id.  Thus, each commit gets
;; an alist of (ORG-ID . N-LINES-CHANGED), where the org-id is unique.
;;
;; Then you can probably reshape this into another kind of table.  I think it'll
;; take less fighting with git's output.  You can then summarize-by-month
;; "manually" with nice and pleasant Lisp code.
;;
;; You don't even need to ID the commits themselves other than by their
;; timestamp.  Then summarizing per-day or per-month is a simple `cl-loop' that
;; checks some substring of the date.



;;-------------
;; how should i add arbitrary text for the month?  I guess it would be easier if
;; I have a preexisting roam node named Changelog, and I write into it headings
;; for each month, following the format "Summary March 2022" etc.  That way,
;; this function would just plug in during org-publish to annotate a copy of
;; that one file to expand each heading with extra info.  Also creating the
;; heading if it doesn't exist yet (no need to create ID for those).
;;
;; Could discuss whether the summaries should just be titled "Changes March
;; 2022" to limit the scope, or if I'm to retitle the Changelog as a broader
;; "News", which fits better with broad-topic Summaries?
(defun my-make-changelog ()
  (my-coalesce-git-log-by-month)
  ;; etc
  )

;; WIP
(defun my-renames-table (dir)
  (require 'ts)
  (let ((default-directory dir)
        (table nil)
        (trails nil))
    (cl-loop
     for extant-file in (directory-files dir)
     as git-output = (my-process-output-to-string
                      "git" "log" "-M" "--diff-filter=R" "--summary"
                      "--follow" "--format='commit %h%n%ai'" "--"
                      extant-file)
     do
     (let (trail)
       (with-temp-buffer
         (insert git-output)
         (goto-char (point-min))
         (while (re-search-forward "^commit" nil t)
           (let ((date (ts-parse (buffer-substring (point) (line-end-position)))))
             ;; (forward-line 3) ;; just in case
             (re-search-forward "^ rename " nil)

             ;; NOTE: Some log lines print curly braces, as in these examples:
             ;;  rename {People => attachments}/laplace.jpg (100%)
             ;;  rename lisp/{00-general.el => 10-general.el} (100%)
             ;; Treat them specially
             (if (save-excursion
                   (search-forward "{" (line-end-position) t))
                 (let (fragments-old
                       fragments-new
                       (beg (point)))
                   ;; I don't know if git-log can print two or more sets of
                   ;; curlybraces, but this while-loop should handle it.
                   (while (search-forward "{" (line-end-position) t)
                     (push (buffer-substring beg (1- (point))) fragments-old)
                     (push (buffer-substring beg (1- (point))) fragments-new)
                     (let ((curly-braced-old
                            (buffer-substring (point)
                                              (- (search-forward " => ") 4)))
                           (curly-braced-new
                            (buffer-substring (point)
                                              (- (search-forward "}") 1))))
                       (push curly-braced-old fragments-old)
                       (push curly-braced-new fragments-new))
                     (setq beg (point)))

                   (let ((final-fragment (buffer-substring
                                          beg (- (search-forward " (") 2))))
                     (push final-fragment fragments-old)
                     (push final-fragment fragments-new))

                   ;; Add a row to the table.  DATE OLDNAME NEWNAME
                   (push (list (ts-format "%F" date)
                               (string-join fragments-old)
                               (string-join fragments-new)) trail))

               ;; Plain log lines look like this:
               ;;  rename index.org => 2022-10-19-index.org (56%)
               (let ((old (buffer-substring (point) (1- (search-forward " "))))
                     (new (buffer-substring (search-forward "=> ") (1- (search-forward " ")))))
                 ;; Add a row to the table
                 (push (list (ts-format "%F" date) old new) trail))))))
       (push trail trails))
     )
    )
  trails)

;; REVIEW: Maybe just construct the coalesced git log from the --follow output,
;;         instead of cross-referencing two different command outputs


;; TODO: Now that we have a list of renames, how do we get the
;; current name of any given file from a given month?  What if we
;; restructure the table so the key is month+filename, and the value
;; is the current filename?
;; (setq foo (my-renames-table org-roam-directory))
;; (my-coalesce-git-log-by-month)
;; WIP
(defun my-coalesce-git-log-by-month ()
  (require 'ts)
  (let ((default-directory org-roam-directory)
        (files (directory-files-recursively org-roam-directory "\\.org$" t))
        (renames nil))

    ;; (setq renames (my-renames-table org-roam-directory))

    (with-temp-file "/tmp/test"
      (cl-loop
       ;; Some relevant dates:
       ;; - Git-init on 2021-Aug-31, but little real use until 2022
       ;; - 2023 is when I started with auto-commits
       for year from 2023 to (decoded-time-year (decode-time))
       do (cl-loop
           for month from 1 to 12
           as this-month = (concat (int-to-string year)
                                   "-"
                                   (string-pad (int-to-string month) 2 ?0 t)
                                   "-01")
           as next-month = (if (= month 12)
                               (concat (int-to-string (1+ year)) "-01-01")
                             (concat (int-to-string year)
                                     "-"
                                     (string-pad (int-to-string (1+ month)) 2 ?0 t)
                                     "-01"))
           do (let ((files-changed-this-month
                     (--filter (member (file-name-extension it) '(nil "org" "txt" "md"))
                               (-uniq (split-string (my-process-output-to-string
                                                     "git" "log" "--format=" "--name-only"
                                                     (concat "--since=" this-month)
                                                     (concat "--until=" next-month)))))))
                ;; while we're at it, find dailies created this month
                ;; (cl-loop for file in (directory-files "/home/kept/roam/daily" t)
                ;;          when (and (string-search (substring this-month 0 8) file)
                ;;                    (with-temp-buffer
                ;;                      (insert-file-contents file)
                ;;                      ;; file is completely untagged? then it's public
                ;;                      (not (org-get-tags))))
                ;;          do (insert "\n- " file))
                (when files-changed-this-month
                  (insert "\n\n* Changelog " (ts-format "%B %Y" (ts-parse this-month)))
                  (cl-loop
                   for file in files-changed-this-month
                   as changes = (split-string
                                 (my-process-output-to-string
                                  "git" "log" "--format=" "--numstat"
                                  (concat "--since=" this-month)
                                  (concat "--until=" next-month)
                                  "--follow" "--" (shell-quote-argument file))
                                 "\n")
                   do
                   (cl-loop
                    for line in changes
                    with total-diff = 0
                    when (/= 0 (length line))
                    do (seq-let (adds dels &rest _) (split-string line)
                         (if (and adds dels
                                  (string-match-p "^[[:digit:]]+$" adds)
                                  (string-match-p "^[[:digit:]]+$" dels))
                             (cl-incf total-diff (- (string-to-number adds)
                                                    (string-to-number dels)))
                           (message "Non-number in log line %s" line)))
                    finally do
                    (when (> total-diff 20)
                      (insert "\n" (int-to-string total-diff) " new lines in " file)))
                   ))))))))
;; (my-coalesce-git-log-by-month)
